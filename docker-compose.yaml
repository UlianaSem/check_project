version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
  
  kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis
    ports:
      - "6380:6379"

  db_producer:
    image: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - check_producer/.env
    environment:
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - pg_data_1:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  app_producer:
    build:
      context: .
      dockerfile: ./check_producer/Dockerfile
    tty: true
    command: sh -c "python manage.py migrate && python manage.py createuser && python manage.py runserver 0.0.0.0:8080"
    volumes:
      - ./check_producer:/app
    ports:
      - "8080:8080"
    depends_on:
      db_producer:
        condition: service_healthy
      kafka:
        condition: service_started

  db_consumer:
    image: postgres
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - check_consumer/.env
    environment:
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - pg_data_2:/var/lib/postgresql/data
    ports:
      - "5435:5436"

  app_consumer:
    build:
      context: .
      dockerfile: ./check_consumer/Dockerfile
    tty: true
    command: sh -c "python manage.py migrate && python manage.py createuser && python manage.py runserver 0.0.0.0:8082"
    volumes:
      - ./check_consumer:/app
    ports:
      - "8082:8082"
    depends_on:
      db_consumer:
        condition: service_healthy

  consumer:
    build:
      context: .
      dockerfile: ./check_consumer/Dockerfile
    tty: true
    command: python3 manage.py consumer
    depends_on:
      - app_consumer
      - kafka

  celery:
    build:
      context: .
      dockerfile: ./check_consumer/Dockerfile
    tty: true
    command: celery -A config worker --loglevel=info
    depends_on:
      - redis
      - app_consumer

  celery_beat:
    build:
      context: .
      dockerfile: ./check_consumer/Dockerfile
    tty: true
    command: celery -A config beat --loglevel=info -S django
    depends_on:
      - redis
      - app_consumer
      - celery

volumes:
  pg_data_1:
  pg_data_2:
